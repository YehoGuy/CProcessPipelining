"ls -l | tail -n 2".
question A : what does "ls -l" do, what does "tail -n 2" do, and what should their combination produce?
answer: ls -l generates a detailed information on each of the files and folders in the current directory, 
        such as permissions, Owner name, file size, last modified etc...
        trail -n <num> outputs only the last <num> lines of an input.
        so the combination ls -l | tail -n 2 will output detailed information of the 
        last 2 files in alphanumeric order in the current-directory.

Question 3: How does the following affect your program:
1. Comment out step 4 in your code (i.e. on the parent process:do not Close the write end of the pipe). Compile and run your code.
        answer: if we leave the write-end of the pipe open before forcking child-process 2 - it will continue waiting for data indefinitely
                without recieving an EOF signal.
2. Undo the change from the last step. Comment out step 7 in your code. Compile and run your code.
        answer: output is fine, resources are wasted.
2. Undo the change from the last step. Comment out step 4 and step 8 in your code. Compile and run your code.
        answer: stuck on fprintf(stderr, "(parent_process>waiting for child processes to terminateâ€¦)\n");
